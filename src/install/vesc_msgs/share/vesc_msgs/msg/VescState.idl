// generated from rosidl_adapter/resource/msg.idl.em
// with input from vesc_msgs/msg/VescState.msg
// generated code does not contain a copyright notice


module vesc_msgs {
  module msg {
    module VescState_Constants {
      @verbatim (language="comment", text=
        "fault codes")
      const int32 FAULT_CODE_NONE = 0;
      const int32 FAULT_CODE_OVER_VOLTAGE = 1;
      const int32 FAULT_CODE_UNDER_VOLTAGE = 2;
      const int32 FAULT_CODE_DRV8302 = 3;
      const int32 FAULT_CODE_ABS_OVER_CURRENT = 4;
      const int32 FAULT_CODE_OVER_TEMP_FET = 5;
      const int32 FAULT_CODE_OVER_TEMP_MOTOR = 6;
    };
    @verbatim (language="comment", text=
      "Vedder VESC open source motor controller state (telemetry)")
    struct VescState {
      @verbatim (language="comment", text=
        "input voltage (volt)")
      double voltage_input;

      @verbatim (language="comment", text=
        "temperature of printed circuit board (degrees Celsius)")
      double temperature_pcb;

      @verbatim (language="comment", text=
        "motor current (ampere)")
      double current_motor;

      @verbatim (language="comment", text=
        "input current (ampere)")
      double current_input;

      @verbatim (language="comment", text=
        "motor electrical speed (revolutions per minute)")
      double speed;

      @verbatim (language="comment", text=
        "duty cycle (0 to 1)")
      double duty_cycle;

      @verbatim (language="comment", text=
        "electric charge drawn from input (ampere-hour)")
      double charge_drawn;

      @verbatim (language="comment", text=
        "electric charge regenerated to input (ampere-hour)")
      double charge_regen;

      @verbatim (language="comment", text=
        "energy drawn from input (watt-hour)")
      double energy_drawn;

      @verbatim (language="comment", text=
        "energy regenerated to input (watt-hour)")
      double energy_regen;

      @verbatim (language="comment", text=
        "net tachometer (counts)")
      double displacement;

      @verbatim (language="comment", text=
        "total tachnometer (counts)")
      double distance_traveled;

      int32 fault_code;
    };
  };
};
